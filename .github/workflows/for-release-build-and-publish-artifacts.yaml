name: Build and publish Operator, Bundle and Catalog artifacts for releases

on:
  push:
    branches: [main]

jobs:
  release_build:
    runs-on: ubuntu-latest
    env:
      REGISTRY: "quay.io/manstis"

    steps:
      # ===============================
      # Checkout code to get tags
      # -------------------------------
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      # ===============================

      # ===============================
      # Login to repositories
      # -------------------------------
      - name: Log into registry ghcr.io
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log into target registry
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.QUAY_USER }}
          password: ${{ secrets.QUAY_TOKEN }}
      # ===============================

      # ===============================
      # Construct next version
      # -------------------------------
      # Read the latest semver tag
      - name: Get latest tag
        id: latest_tag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        with:
          fallback: 0.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Increment the latest semver tag for release builds
      - name: Read semver version
        id: next_tag
        uses: WyriHaximus/github-action-next-semvers@v1
        with:
          version: ${{ steps.latest_tag.outputs.tag }}

      # Build complete release version
      - name: Semver tags
        id: version_semver
        run: |
          echo "IMAGE_SEMVER_VERSION=${{ steps.next_tag.outputs.minor }}" >> $GITHUB_ENV
      # ===============================

      # ===============================
      # Read the latest ai-connect version
      # -------------------------------
      # TODO {manstis} This will be read from the file Roger writes to from 'wisdom-service-ops'
      # JSON is formatted "version": "latest 1.0.202404171921" so skip 'latest '
      - name: Get latest ai-connect version
        id: latest_ai_connect_version
        run: |
          echo "LATEST_AI_CONNECT_VERSION=$(curl -s https://wisdom-service.apps.stage2-west.v2dz.p1.openshiftapps.com/check/ | jq .version[7:])" >> $GITHUB_ENV
      # ===============================

      # ===============================
      # Create docker tags
      # -------------------------------
      - name: Tag Name
        id: tag_name
        run: |
          echo "IMAGE_TAGS=-t ${{ env.REGISTRY }}/ansible-ai-connect-operator:${IMAGE_SEMVER_VERSION} -t ${{ env.REGISTRY }}/ansible-ai-connect-operator:latest" >> $GITHUB_OUTPUT
          echo "TAG_VERSIONS=${IMAGE_SEMVER_VERSION}" >> $GITHUB_ENV
      # ===============================

      # ===============================
      # Operator
      # -------------------------------
      - name: Build and store Operator image in @ghcr
        run: |
          BUILD_ARGS="--build-arg DEFAULT_AI_CONNECT_VERSION=${LATEST_AI_CONNECT_VERSION} --build-arg OPERATOR_VERSION=${IMAGE_SEMVER_VERSION}" \
          IMG=ghcr.io/${{ github.repository_owner }}/ansible-ai-connect-operator:${{ github.sha }} \
          make docker-buildx

      - name: Publish Operator images to registries
        run: |
          docker buildx imagetools create ghcr.io/${{ github.repository_owner }}/ansible-ai-connect-operator:${{ github.sha }} ${{ steps.tag_name.outputs.IMAGE_TAGS }}
      # ===============================

      # ===============================
      # Operator bundle
      # -------------------------------
      - name: Build and tag Bundle images
        run: |
          make bundle bundle-build VERSION=${IMAGE_SEMVER_VERSION} IMG=${{ env.REGISTRY }}/ansible-ai-connect-operator:${IMAGE_SEMVER_VERSION} BUNDLE_IMG=ansible-ai-connect-bundle:${IMAGE_SEMVER_VERSION}
          docker tag ansible-ai-connect-bundle:${IMAGE_SEMVER_VERSION} ansible-ai-connect-bundle:latest

      - name: Update ClusterServiceVersion
        run: |
          # No need to set 'replaces' if there is no previous version
          if [[ "${{ steps.latest_tag.outputs.tag }}" == "0.0.0" ]]; then
            >&2 echo "No previous version found."
            exit 0
          fi
          
          # Set 'replaces' to previous version
          VERSION="${IMAGE_SEMVER_VERSION}"
          PREV_VERSION="${{ steps.latest_tag.outputs.tag }}"
          if ! grep -qF 'replaces: ansible-ai-connect-operator.v${PREV_VERSION}' bundle/manifests/ansible-ai-connect-operator.clusterserviceversion.yaml; then
            sed -i "/version: ${VERSION}/a \\  replaces: ansible-ai-connect-operator.v${PREV_VERSION}" ./bundle/manifests/ansible-ai-connect-operator.clusterserviceversion.yaml
          fi

      - name: Push Bundle images to registry
        uses: redhat-actions/push-to-registry@v2.7.1
        with:
          image: ansible-ai-connect-bundle
          tags: ${{ env.TAG_VERSIONS }}
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.QUAY_USER }}
          password: ${{ secrets.QUAY_TOKEN }}
      # ===============================

      # ===============================
      # Operator catalog
      # -------------------------------
      # Get existing tags
      - uses: octokit/request-action@v2.x
        id: existing_tags
        with:
          route: GET /repos/${{ github.repository }}/git/matching-refs/tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Convert tags into set of bundle image references
      - name: Build Catalog index Bundle image list
        id: build_bundle_image_list
        run: |
          set -e

          # Convert JSON to bash array
          tags=$(cat <<-END
            ${{ steps.existing_tags.outputs.data }}
          END
          )
          tags_array=($(jq -r .[].ref <<< $tags))

          # Filter array by tags that end with a semver 
          filtered_tags=()
          regex="refs\/tags\/([0-9]+\.[0-9]+\.[0-9]+)"
          for i in "${tags_array[@]}" ; do
            if [[ $i =~ $regex ]]; then
              filtered_tags+=("${{ env.REGISTRY }}/ansible-ai-connect-bundle:${BASH_REMATCH[1]}") ;
            fi
          done

          # Include the version being built
          filtered_tags+=("${{ env.REGISTRY }}/ansible-ai-connect-bundle:${IMAGE_SEMVER_VERSION}")

          # Convert array back to comma separated list
          output_tags=${filtered_tags[@]}
          output=${output_tags// /,}

          echo "BUNDLE_IMGS=${output}" >> $GITHUB_ENV

          exit 0

      - name: Build and tag Catalog images
        run: |
          make catalog-build CATALOG_IMG=ansible-ai-connect-catalog:${IMAGE_SEMVER_VERSION} BUNDLE_IMGS=${BUNDLE_IMGS}
          docker tag ansible-ai-connect-catalog:${IMAGE_SEMVER_VERSION} ansible-ai-connect-catalog:latest

      - name: Push Catalog images to registry
        uses: redhat-actions/push-to-registry@v2.7.1
        with:
          image: ansible-ai-connect-catalog
          tags: ${{ env.TAG_VERSIONS }}
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.QUAY_USER }}
          password: ${{ secrets.QUAY_TOKEN }}
      # ===============================
