---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    {{ lookup("template", "../common/templates/labels/common.yaml.j2")  | indent(width=4) | trim }}
    {{ lookup("template", "../common/templates/labels/version.yaml.j2") | indent(width=4) | trim }}
    app.kubernetes.io/component: '{{ deployment_type }}-api'
  name: '{{ ansible_operator_meta.name }}-api'
  namespace: '{{ ansible_operator_meta.namespace }}'
spec:
  replicas: {{ combined_api.replicas }}
{% if combined_api.strategy is defined %}
  strategy:
    type: {{ combined_api.strategy.type }}
{% if combined_api.strategy.type == "Recreate" %}
    rollingUpdate: null
{% elif combined_api.strategy.type == "RollingUpdate" %}
    rollingUpdate:
      maxSurge:  {{ combined_api.strategy.rollingUpdate.maxSurge | default("25%")}}
      maxUnavailable: {{ combined_api.strategy.rollingUpdate.maxUnavailable | default("25%")}}
{% endif %}
{% endif %}
  selector:
    matchLabels:
      app.kubernetes.io/name: '{{ ansible_operator_meta.name }}'
      app.kubernetes.io/managed-by: '{{ deployment_type }}-operator'
      app.kubernetes.io/component: '{{ deployment_type }}-api'
  template:
    metadata:
      labels:
        {{ lookup("template", "../common/templates/labels/common.yaml.j2")  | indent(width=8) | trim }}
        {{ lookup("template", "../common/templates/labels/version.yaml.j2") | indent(width=8) | trim }}
        app.kubernetes.io/component: '{{ deployment_type }}-api'
      annotations:
        kubectl.kubernetes.io/default-container: 'model-api'
{% for template in [
    "model.configmap",
    "model.configmap.wisdom-service",
  ] %}
        checksum-{{ template | replace('/', '-') }}: "{{ lookup('template', template + '.yaml.j2') | sha1 }}"
{% endfor %}
{% for secret in [
    "auth_config",
    "model_config",
    "db_fields_encryption",
  ] %}
        checksum-secret-{{ secret }}: "{{ lookup('ansible.builtin.vars', secret, default='')["resources"][0]["data"] | default('') | sha1 }}"
{% endfor %}
    spec:
      serviceAccountName: '{{ ansible_operator_meta.name }}'
{% if image_pull_secrets | length > 0 %}
      imagePullSecrets:
{% for secret in image_pull_secrets %}
        - name: {{ secret }}
{% endfor %}
{% endif %}
{% if combined_api.node_selector is defined %}
      nodeSelector:
        {{ combined_api.node_selector | indent(width=8) }}
{% endif %}
{% if combined_api.tolerations is defined %}
      tolerations:
        {{ combined_api.tolerations | indent(width=8) }}
{% endif %}
{% if combined_api.topology_spread_constraints is defined %}
      topologySpreadConstraints:
        {{ combined_api.topology_spread_constraints | indent(width=8) }}
{% endif %}
      initContainers:
{% if bundle_ca_crt  %}
      - name: configure-bundle-ca-cert
        image: {{ _image }}
        imagePullPolicy: '{{ image_pull_policy }}'
        command:
          - /bin/sh
          - -c
          - |
            mkdir -p /etc/pki/ca-trust/extracted/{java,pem,openssl,edk2}
            update-ca-trust
{% if combined_api.resource_requirements is defined %}
        resources: {{ combined_api.resource_requirements }}
{% endif %}
        volumeMounts:
          - name: "ca-trust-extracted"
            mountPath: "/etc/pki/ca-trust/extracted"
          - name: "{{ ansible_operator_meta.name }}-bundle-cacert"
            mountPath: /etc/pki/ca-trust/source/anchors/bundle-ca.crt
            subPath: bundle-ca.crt
            readOnly: true
{% endif %}
      containers:
      - name: model-api
        image: {{ _image }}
        imagePullPolicy: '{{ image_pull_policy }}'
        envFrom:
          - configMapRef:
              name: '{{ ansible_operator_meta.name }}-{{ deployment_type }}-env-properties'
        env:
        - name: AAP_API_URL
          valueFrom:
            secretKeyRef:
              name: '{{ auth_config_secret_name }}'
              key: auth_api_url
        - name: SOCIAL_AUTH_AAP_KEY
          valueFrom:
            secretKeyRef:
              name: '{{ auth_config_secret_name }}'
              key: auth_api_key
        - name: SOCIAL_AUTH_AAP_SECRET
          valueFrom:
            secretKeyRef:
              name: '{{ auth_config_secret_name }}'
              key: auth_api_secret
        - name: SOCIAL_AUTH_VERIFY_SSL
          valueFrom:
            secretKeyRef:
              name: '{{ auth_config_secret_name }}'
              key: auth_verify_ssl
        - name: ANSIBLE_WISDOM_DOMAIN
          valueFrom:
            secretKeyRef:
              name: '{{ auth_config_secret_name }}'
              key: auth_allowed_hosts
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: '{{ __db_fields_encryption_secret_name }}'
              key: secret_key
        - name: ANSIBLE_AI_DATABASE_HOST
          valueFrom:
            secretKeyRef:
              name: '{{ __database_secret_name }}'
              key: host
        - name: ANSIBLE_AI_DATABASE_NAME
          valueFrom:
            secretKeyRef:
              name: '{{ __database_secret_name }}'
              key: database
        - name: ANSIBLE_AI_DATABASE_PORT
          valueFrom:
            secretKeyRef:
              name: '{{ __database_secret_name }}'
              key: port
        - name: ANSIBLE_AI_DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: '{{ __database_secret_name }}'
              key: username
        - name: ANSIBLE_AI_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: '{{ __database_secret_name }}'
              key: password
        - name: ANSIBLE_AI_MODEL_MESH_API_TYPE
          valueFrom:
            secretKeyRef:
              name: '{{ model_config_secret_name }}'
              key: model_type
        - name: ANSIBLE_AI_MODEL_MESH_INFERENCE_URL
          valueFrom:
            secretKeyRef:
              name: '{{ model_config_secret_name }}'
              key: model_url
        - name: ANSIBLE_AI_MODEL_MESH_API_KEY
          valueFrom:
            secretKeyRef:
              name: '{{ model_config_secret_name }}'
              key: model_api_key
        - name: ANSIBLE_AI_MODEL_MESH_MODEL_ID
          valueFrom:
            secretKeyRef:
              name: '{{ model_config_secret_name }}'
              key: model_id
{% if model_type == "wca-onprem" %}
        - name: ANSIBLE_WCA_USERNAME
          valueFrom:
            secretKeyRef:
              name: '{{ model_config_secret_name }}'
              key: username
{% endif %}
        - name: ANSIBLE_WCA_HEALTHCHECK_API_KEY
          valueFrom:
            secretKeyRef:
              name: '{{ model_config_secret_name }}'
              key: model_api_key
        - name: ANSIBLE_WCA_HEALTHCHECK_MODEL_ID
          valueFrom:
            secretKeyRef:
              name: '{{ model_config_secret_name }}'
              key: model_id
        ports:
        - containerPort: 8000
          protocol: TCP
        startupProbe:
          exec:
            command:
            - venv/bin/uwsgi-is-ready
            - --stats-socket
            - /tmp/uwsgi-stats
            - --queue-threshold
            - '0.7'
          failureThreshold: 10
          successThreshold: 1
          periodSeconds: 30
          timeoutSeconds: 1
        readinessProbe:
          exec:
            command:
            - venv/bin/uwsgi-is-ready
            - --stats-socket
            - /tmp/uwsgi-stats
            - --queue-threshold
            - '0.7'
          initialDelaySeconds: 5
          failureThreshold: 2
          successThreshold: 1
          periodSeconds: 5
          timeoutSeconds: 1
        livenessProbe:
          exec:
            command:
            - venv/bin/uwsgi-is-ready
            - --stats-socket
            - /tmp/uwsgi-stats
            - --queue-threshold
            - '0.7'
          initialDelaySeconds: 5
          failureThreshold: 2
          successThreshold: 1
          periodSeconds: 5
          timeoutSeconds: 1
        volumeMounts:
            - name: mnt
              mountPath: /etc/wisdom/uwsgi.ini
              subPath: uwsgi_ini
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - "ALL"
          seccompProfile:
            type: RuntimeDefault
{% if combined_api.resource_requirements is defined %}
        resources: {{ combined_api.resource_requirements }}
{% endif %}
{% if bundle_ca_crt %}
        volumeMounts:
          - name: "ca-trust-extracted"
            mountPath: "/etc/pki/ca-trust/extracted"
          - name: "{{ ansible_operator_meta.name }}-bundle-cacert"
            mountPath: /etc/pki/ca-trust/source/anchors/bundle-ca.crt
            subPath: bundle-ca.crt
            readOnly: true
{% endif %}
      restartPolicy: Always
      volumes:
        - name: mnt
          configMap:
            name: wisdom-service-uwsgi-configmap
{% if bundle_ca_crt %}
        - name: "ca-trust-extracted"
          emptyDir: {}
        - name: "{{ ansible_operator_meta.name }}-bundle-cacert"
          secret:
            secretName: "{{ bundle_cacert_secret }}"
            items:
              - key: bundle-ca.crt
                path: 'bundle-ca.crt'
{% endif %}
